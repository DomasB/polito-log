// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ApiHealthCheckApiV1GetData, ApiHealthCheckApiV1GetResponses, CreateStatementApiV1StatementsPostData, CreateStatementApiV1StatementsPostErrors, CreateStatementApiV1StatementsPostResponses, DeleteStatementApiV1StatementsStatementIdDeleteData, DeleteStatementApiV1StatementsStatementIdDeleteErrors, DeleteStatementApiV1StatementsStatementIdDeleteResponses, GetStatementApiV1StatementsStatementIdGetData, GetStatementApiV1StatementsStatementIdGetErrors, GetStatementApiV1StatementsStatementIdGetResponses, GetStatementsApiV1StatementsGetData, GetStatementsApiV1StatementsGetErrors, GetStatementsApiV1StatementsGetResponses, GetStatementsByPartyApiV1StatementsPartyPartyGetData, GetStatementsByPartyApiV1StatementsPartyPartyGetErrors, GetStatementsByPartyApiV1StatementsPartyPartyGetResponses, GetStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGetData, GetStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGetErrors, GetStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGetResponses, GetStatementsByStatusApiV1StatementsStatusStatusGetData, GetStatementsByStatusApiV1StatementsStatusStatusGetErrors, GetStatementsByStatusApiV1StatementsStatusStatusGetResponses, HealthCheckGetData, HealthCheckGetResponses, SearchStatementsApiV1StatementsSearchGetData, SearchStatementsApiV1StatementsSearchGetErrors, SearchStatementsApiV1StatementsSearchGetResponses, UpdateStatementApiV1StatementsStatementIdPutData, UpdateStatementApiV1StatementsStatementIdPutErrors, UpdateStatementApiV1StatementsStatementIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all statements
 *
 * Get all statements with pagination.
 *
 * Args:
 * skip: Number of records to skip
 * limit: Maximum number of records to return
 * active_only: If True, return only active statements
 * service: Statement service instance
 *
 * Returns:
 * List of statements
 */
export const getStatementsApiV1StatementsGet = <ThrowOnError extends boolean = false>(options?: Options<GetStatementsApiV1StatementsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStatementsApiV1StatementsGetResponses, GetStatementsApiV1StatementsGetErrors, ThrowOnError>({
        url: '/api/v1/statements/',
        ...options
    });
};

/**
 * Create a new statement
 *
 * Create a new political statement.
 *
 * Args:
 * statement: Statement data
 * service: Statement service instance
 *
 * Returns:
 * Created statement
 */
export const createStatementApiV1StatementsPost = <ThrowOnError extends boolean = false>(options: Options<CreateStatementApiV1StatementsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStatementApiV1StatementsPostResponses, CreateStatementApiV1StatementsPostErrors, ThrowOnError>({
        url: '/api/v1/statements/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete statement
 *
 * Delete a statement (soft or hard delete).
 *
 * Args:
 * statement_id: Statement ID
 * soft_delete: If True, perform soft delete (set is_active=False)
 * service: Statement service instance
 *
 * Raises:
 * HTTPException: 404 if statement not found
 */
export const deleteStatementApiV1StatementsStatementIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteStatementApiV1StatementsStatementIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStatementApiV1StatementsStatementIdDeleteResponses, DeleteStatementApiV1StatementsStatementIdDeleteErrors, ThrowOnError>({
        url: '/api/v1/statements/{statement_id}',
        ...options
    });
};

/**
 * Get statement by ID
 *
 * Get a specific statement by ID.
 *
 * Args:
 * statement_id: Statement ID
 * service: Statement service instance
 *
 * Returns:
 * Statement data
 *
 * Raises:
 * HTTPException: 404 if statement not found
 */
export const getStatementApiV1StatementsStatementIdGet = <ThrowOnError extends boolean = false>(options: Options<GetStatementApiV1StatementsStatementIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatementApiV1StatementsStatementIdGetResponses, GetStatementApiV1StatementsStatementIdGetErrors, ThrowOnError>({
        url: '/api/v1/statements/{statement_id}',
        ...options
    });
};

/**
 * Update statement
 *
 * Update an existing statement.
 *
 * Args:
 * statement_id: Statement ID
 * statement_data: Updated statement data
 * service: Statement service instance
 *
 * Returns:
 * Updated statement
 *
 * Raises:
 * HTTPException: 404 if statement not found
 */
export const updateStatementApiV1StatementsStatementIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateStatementApiV1StatementsStatementIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateStatementApiV1StatementsStatementIdPutResponses, UpdateStatementApiV1StatementsStatementIdPutErrors, ThrowOnError>({
        url: '/api/v1/statements/{statement_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get statements by politician
 *
 * Get all statements by a specific politician.
 *
 * Args:
 * politician_name: Name of the politician
 * skip: Number of records to skip
 * limit: Maximum number of records to return
 * service: Statement service instance
 *
 * Returns:
 * List of statements
 */
export const getStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGet = <ThrowOnError extends boolean = false>(options: Options<GetStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGetResponses, GetStatementsByPoliticianApiV1StatementsPoliticianPoliticianNameGetErrors, ThrowOnError>({
        url: '/api/v1/statements/politician/{politician_name}',
        ...options
    });
};

/**
 * Get statements by party
 *
 * Get all statements by a specific party.
 *
 * Args:
 * party: Name of the party
 * skip: Number of records to skip
 * limit: Maximum number of records to return
 * service: Statement service instance
 *
 * Returns:
 * List of statements
 */
export const getStatementsByPartyApiV1StatementsPartyPartyGet = <ThrowOnError extends boolean = false>(options: Options<GetStatementsByPartyApiV1StatementsPartyPartyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatementsByPartyApiV1StatementsPartyPartyGetResponses, GetStatementsByPartyApiV1StatementsPartyPartyGetErrors, ThrowOnError>({
        url: '/api/v1/statements/party/{party}',
        ...options
    });
};

/**
 * Get statements by status
 *
 * Get all statements by verification status.
 *
 * Args:
 * status: Statement status (pending, verified, disputed, retracted)
 * skip: Number of records to skip
 * limit: Maximum number of records to return
 * service: Statement service instance
 *
 * Returns:
 * List of statements
 */
export const getStatementsByStatusApiV1StatementsStatusStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetStatementsByStatusApiV1StatementsStatusStatusGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatementsByStatusApiV1StatementsStatusStatusGetResponses, GetStatementsByStatusApiV1StatementsStatusStatusGetErrors, ThrowOnError>({
        url: '/api/v1/statements/status/{status}',
        ...options
    });
};

/**
 * Search statements
 *
 * Search statements by text in statement content, politician name, or party.
 *
 * Args:
 * q: Search query
 * skip: Number of records to skip
 * limit: Maximum number of records to return
 * service: Statement service instance
 *
 * Returns:
 * List of matching statements
 */
export const searchStatementsApiV1StatementsSearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchStatementsApiV1StatementsSearchGetData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchStatementsApiV1StatementsSearchGetResponses, SearchStatementsApiV1StatementsSearchGetErrors, ThrowOnError>({
        url: '/api/v1/statements/search/',
        ...options
    });
};

/**
 * Health Check
 *
 * Health check endpoint.
 *
 * Returns:
 * Status information
 */
export const healthCheckGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Api Health Check
 *
 * API health check endpoint.
 *
 * Returns:
 * API information
 */
export const apiHealthCheckApiV1Get = <ThrowOnError extends boolean = false>(options?: Options<ApiHealthCheckApiV1GetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ApiHealthCheckApiV1GetResponses, unknown, ThrowOnError>({
        url: '/api/v1/',
        ...options
    });
};
